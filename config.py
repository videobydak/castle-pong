import random
import builtins as _builtins

# --- Constants ---
WIDTH, HEIGHT = 1280, 900
FPS = 120

BASE_BLOCK_SIZE = 30
BLOCK_SIZE = 45   # 50% larger than previous 30
SCALE = BLOCK_SIZE / BASE_BLOCK_SIZE

PADDLE_THICK = int(12 * SCALE)
PADDLE_LEN = int(150 * SCALE)  # Increased by 50% and scaled
BALL_RADIUS = int(8 * SCALE)
CANNON_GAP = int(10 * SCALE)
CANNON_LEN = int(25 * SCALE)

# Paddle movement parameters
PADDLE_MAX_SPEED = 10  # pixels per frame (at 60 FPS baseline)
PADDLE_ACCEL      = 0.6  # acceleration per frame while key held
PADDLE_FRICTION   = 0.85 # velocity retained each frame when no input
BALL_SPEED = 5
BALL_FRICTION = 0.999   # multiplier each frame (~0.1% loss, keeps cannonballs lively)
BALL_SHATTER_SPEED = BALL_SPEED * 0.45 # 7% of BALL_SPEED (4*0.07)
SHOOT_INTERVAL = 2000       # ms between castle shots
POWERUP_CHANCE = 0.07        # chance a shot is power-up

# Colors
WHITE = (255,255,255)
RED   = (255,0,0)
GREEN = (0,255,0)
BLUE  = (0,0,255)
YELLOW= (255,255,0)
BG    = (30,30,30)
GREY = (100,100,100)   # cannon colour

# Cannon visuals
CANNON_ARC = 180       # sweep half-width (±180° → 360° total)
CANNON_SPEED = 0.002  # radians per ms – how fast the barrels swing 

PADDLE_MARGIN = int(30 * SCALE)  # gap between paddles and arena edge 
# Dedicated gap for the *bottom* paddle so it clears the player wall
# (double the regular margin plus 10 px → 50 px).
BOTTOM_PADDLE_MARGIN = PADDLE_MARGIN * 2 + int(10 * SCALE) 

# Universal potion color palette
POTION_COLORS = {
    'widen':  (0,120,255),    # blue
    'sticky': (0,200,0),      # green
    'through': (255, 140, 0), # orange
    'barrier': (0,255,255),   # cyan
    'pierce': (200,0,255)     # purple
}

# Potion type weights for rarity (higher = more common)
POTION_TYPE_WEIGHTS = [
    ('widen', 20),   # most common
    ('sticky', 20),  # most common
    ('through', 10), # uncommon
    ('barrier', 5),  # rare
    ('pierce', 2)    # rarest
]

# Block color pairs for castle and player wall (centralized here)
BLOCK_COLOR_L1 = ((30, 30, 30), (10, 10, 10))        # Layer 1 (darkest)
BLOCK_COLOR_L2 = ((80, 80, 80), (50, 50, 50))     # Layer 2 (medium)
BLOCK_COLOR_L3 = ((130, 130, 130), (110, 110, 110))  # Layer 3 (lightest)
BLOCK_COLOR_DEFAULT = ((110, 110, 110), (90, 90, 90))# Fallback/default wall
BLOCK_COLOR_WALKWAY = ((160, 160, 160), (140, 140, 140)) # Walkway
BLOCK_COLOR_GARDEN = ((34, 139, 34), (46, 160, 46))      # Garden

# --- Crack Generation Parameters ---
CRACK_SEGMENTS_BASE = 2         # Base number of crack segments per hit
CRACK_SEGMENTS_RANDOM = 3      # Max random additional segments per hit
CRACK_SEGMENT_LENGTH_BASE = 60  # Base length of each crack segment
CRACK_SEGMENT_LENGTH_RANDOM = 60 # Max random additional length per segment
CRACK_BRANCH_PROB = 0.55         # Probability a segment will branch
CRACK_BRANCH_MIN = 1            # Minimum number of branches per crack
CRACK_BRANCH_MAX = 2            # Maximum number of branches per crack
CRACK_ANGLE_RANDOMNESS = 0.55    # Radians, max deviation from main direction
CRACK_WIDTH = 2               # Pixel width of crack lines
CRACK_COLOR = (20, 20, 20)      # Color of cracks

MAGNUS_COEFF = 0.054  # Coefficient controlling side force generated by spin (Magnus effect)
SPIN_DAMPING  = 0.995  # Per-frame damping applied to angular velocity
SPIN_TRANSFER = .1    # Fraction of paddle tangential velocity converted into spin on hit
LINEAR_TRANSFER = 0.7  # Fraction of paddle tangential velocity added to linear velocity on hit

DEBUG = False  # Set to False to disable debug console logs

_original_print = _builtins.print

def _debug_filter_print(*args, **kwargs):
    """Custom print that omits messages starting with '[DEBUG]' when DEBUG is False."""
    if not DEBUG:
        if args and isinstance(args[0], str) and args[0].startswith("[DEBUG]"):
            return  # Skip debug message
    _original_print(*args, **kwargs)

_builtins.print = _debug_filter_print

def get_random_potion_type(rng=random):
    types, weights = zip(*POTION_TYPE_WEIGHTS)
    return rng.choices(types, weights=weights, k=1)[0] 